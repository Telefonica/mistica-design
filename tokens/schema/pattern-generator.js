const fs = require("fs");
const path = require("path");

// Directory where the brand color files are stored
const brandDirectory = path.join(__dirname, "..");

// Output directory for the generated patterns
const outputDirectory = path.join(__dirname, "patterns");

// Ensure the output directory exists
if (!fs.existsSync(outputDirectory)) {
  fs.mkdirSync(outputDirectory);
}

// Function to generate patterns from a colors array
function generatePatterns(colors) {
  const colorsPattern = colors.join("|");

  const palettePattern = `(.*?rgba.*?)+([({])+(palette.(${colorsPattern})}, (0+([.][0-9]+)?|1([.]0)?)[)])$|^({palette.(${colorsPattern})+})$|(.*?linear-gradient.*?)+([(])(?:36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])(.*?deg).*[)]$`;
  const descriptionPattern = `^(${colorsPattern})+$`;

  return {
    palettePattern,
    descriptionPattern,
  };
}

// Process each JSON file in the brand directory
fs.readdirSync(brandDirectory).forEach((file) => {
  if (path.extname(file) === ".json" && file !== "package.json") {
    const brandName = path.basename(file, ".json");
    const colorsData = require(path.join(brandDirectory, file));
    const colors = Object.keys(colorsData.global.palette);

    // Generate the patterns
    const patterns = generatePatterns(colors);

    const output = {
      /* This is a automatically generated file. Do not edit this file manually. */

      colorPattern: {
        pattern: patterns.palettePattern,
      },
      descriptionPattern: {
        pattern: patterns.descriptionPattern,
      },
    };

    // Save the patterns to a file
    const outputFilePath = path.join(outputDirectory, `${brandName}-pattern.json`);
    fs.writeFileSync(outputFilePath, JSON.stringify(output, null, 2));
    console.log(`Generated pattern for ${brandName} and saved to ${outputFilePath}`);
  }
});
